devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
system.file("include", package = "lars")
system.file("package", package = "lars")
install.packages("RcppArmadillo")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
roxygen2::roxygenise(clean = TRUE)
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::clean_dll()
devtools::check()
devtools::clean_dll()
devtools::check()
devtools::clean_dll()
devtools::check()
devtools::session_info("lars")
devtools::session_info("Rcpp")
devtools::session_info("microbenchmark")
devtools::check()
devtools::check()
devtools::check()
#Initialize parameters
#n<-200;p<-2000;r0<-0.5
n<-20;p<-10;r0<-0.5
#Generate covariance matrix Sigma of Gaussian distribution
library(pracma) #create basic matrices like eye(n,m=n), ones(n,m=n) and zeros(n,m=n)
Sigma1<-eye(p);Sigma2<-0.5*eye(p)+0.5*ones(p)
#Generate design matrix X
library(MASS);set.seed(123)
X1<-mvrnorm(n,rep(0,p),Sigma1)
X2<-mvrnorm(n,rep(0,p),Sigma2);#Initialize parameters
sigma<-1;beta.star<-matrix(0,nrow=p,ncol=1);beta.star[1,1]<-1/sqrt(3)
beta.star[2,1]<-1/sqrt(3);beta.star[3,1]<-1/sqrt(3)
#Generate response vector y
set.seed(123)
y1<-as.vector(X1%*%beta.star)+rnorm(n,0,sigma^2)
y2<-as.vector(X2%*%beta.star)+rnorm(n,0,sigma^2);#Initialize parameters
lambda1<-sqrt(log(p)/n)
lambda2<-sqrt(2*log(p)/n)
lambda3<-sqrt(4*log(p)/n)
d1<-list(x=X1,y=y1,lambda0=lambda2);d1<-data.frame(d1)
#Initialize parameters
n<-200;p<-2000;r0<-0.5
#Generate covariance matrix Sigma of Gaussian distribution
library(pracma) #create basic matrices like eye(n,m=n), ones(n,m=n) and zeros(n,m=n)
Sigma1<-eye(p);Sigma2<-0.5*eye(p)+0.5*ones(p)
#Generate design matrix X
library(MASS);set.seed(123)
X1<-mvrnorm(n,rep(0,p),Sigma1)
X2<-mvrnorm(n,rep(0,p),Sigma2);#Initialize parameters
sigma<-1;beta.star<-matrix(0,nrow=p,ncol=1);beta.star[1,1]<-1/sqrt(3)
beta.star[2,1]<-1/sqrt(3);beta.star[3,1]<-1/sqrt(3)
#Generate response vector y
set.seed(123)
y1<-as.vector(X1%*%beta.star)+rnorm(n,0,sigma^2)
y2<-as.vector(X2%*%beta.star)+rnorm(n,0,sigma^2);#Initialize parameters
lambda1<-sqrt(log(p)/n)
lambda2<-sqrt(2*log(p)/n)
lambda3<-sqrt(4*log(p)/n)
d1<-list(x=X1,y=y1,lambda0=lambda2);d1<-data.frame(d1)
d2<-list(x=X2,y=y2,lambda0=lambda2);d2<-data.frame(d2)
View(d1)
#Initialize parameters
n<-100;p<-1000;r0<-0.5
#Generate covariance matrix Sigma of Gaussian distribution
library(pracma) #create basic matrices like eye(n,m=n), ones(n,m=n) and zeros(n,m=n)
Sigma1<-eye(p);Sigma2<-0.5*eye(p)+0.5*ones(p)
#Generate design matrix X
library(MASS);set.seed(123)
X1<-mvrnorm(n,rep(0,p),Sigma1)
X2<-mvrnorm(n,rep(0,p),Sigma2);#Initialize parameters
sigma<-1;beta.star<-matrix(0,nrow=p,ncol=1);beta.star[1,1]<-1/sqrt(3)
beta.star[2,1]<-1/sqrt(3);beta.star[3,1]<-1/sqrt(3)
#Generate response vector y
set.seed(123)
y1<-as.vector(X1%*%beta.star)+rnorm(n,0,sigma^2)
y2<-as.vector(X2%*%beta.star)+rnorm(n,0,sigma^2);#Initialize parameters
lambda1<-sqrt(log(p)/n)
lambda2<-sqrt(2*log(p)/n)
lambda3<-sqrt(4*log(p)/n)
d1<-list(x=X1,y=y1,lambda0=lambda2);d1<-data.frame(d1)
d2<-list(x=X2,y=y2,lambda0=lambda2);d2<-data.frame(d2)
save(d1,file='data/data1.rda',compress=TRUE)
save(d2,file='data/data2.rda',compress=TRUE)
devtools::check()
View(d1)
devtools::document()
devtools::check()
restartSession()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
